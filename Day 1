Basics of Cpp:
Hello World Program

// C++ program to display "Hello World"
// Header file for input output functions
#include <iostream>
using namespace std;

// Main() function: where the execution of program begins
int main()
{
    // prints hello world
    cout << "Hello World";

    return 0;
}

Data Types in CPP:
1. Primitive Data Types: These data types are built-in or predefined data types and can be used directly by the user to declare variables. example: int, char, float, bool, etc. Primitive data types available in C++ are: 

Integer
Character
Boolean
Floating Point
Double Floating Point
Valueless or Void
Wide Character

2. Derived Data Types: The data types that are derived from the primitive or built-in datatypes are referred to as Derived Data Types. These can be of four types namely: 

Function
Array
Pointer
Reference
3. Abstract or User-Defined Data Types: These data types are defined by the user itself. Like, as defining a class in C++ or a structure. C++ provides the following user-defined datatypes: 

Class
Structure
Union
Enumeration
Typedef defined DataType
 
 
Data Type
Size (in bytes)
Range
short int
 
2
 
-32,768 to 32,767
 
unsigned short int
 
2
 
0 to 65,535
 
unsigned int
 
4
 
0 to 4,294,967,295
 
int
 
4
 
-2,147,483,648 to 2,147,483,647
 
long int
 
4
 
-2,147,483,648 to 2,147,483,647
 
unsigned long int
 
4
 
0 to 4,294,967,295
 
long long int
 
8
 
-(2^63) to (2^63)-1
 
unsigned long long int
 
8
 
0 to 18,446,744,073,709,551,615
 
signed char
 
1
 
-128 to 127
 
unsigned char
 
1
 
0 to 255
 
float
 
4
 


double
 
8
 


long double
 
12
 


wchar_t
2 or 4
1 wide characte


Basic Input/Output Streams in cpp
C++ comes with libraries that provide us with many ways for performing input and output. In C++ input and output are performed in the form of a sequence of bytes or more commonly known as streams.

Input Stream: If the direction of flow of bytes is from the device(for example, Keyboard) to the main memory then this process is called input.
Output Stream: If the direction of flow of bytes is opposite, i.e. from main memory to device( display screen ) then this process is called output.




 
Header files available in C++ for Input/Output operations are: 

iostream: iostream stands for standard input-output stream. This header file contains definitions of objects like cin, cout, cerr, etc.
iomanip: iomanip stands for input-output manipulators. The methods declared in these files are used for manipulating streams. This file contains definitions of setw, setprecision, etc.
fstream: This header file mainly describes the file stream. This header file is used to handle the data being read from a file as input or data being written into the file as output.
 
<bits/stdc++.h> in CPP
It is basically a header file that includes every standard library. In programming contests, using this file is a good idea, when you want to reduce the time wasted in doing chores; especially when your rank is time-sensitive. 
In programming contests, people do focus more on finding the algorithm to solve a problem than on software engineering. From, a software engineering perspective, it is a good idea to minimize the include. If you use it actually includes a lot of files, which your program may not need, thus increasing both compile-time and program size unnecessarily. 
 
Disadvantages of bits/stdc++ 
 
 
bits/stdc++.h is a non-standard header file of GNU C++ library. So, if you try to compile your code with some compiler other than GCC it might fail; e.g. MSVC do not have this header.
Using it would include a lot of unnecessary stuff and increases compilation time.
This header file is not part of the C++ standard and is therefore, non-portable, and should be avoided.
Moreover, even if there were some catch-all header in the standard, you would want to avoid it in lieu of specific headers, since the compiler has to actually read in and parse every included header (including recursively included headers) every single time that translation unit is compiled.
 
 
 
Advantages of bits/stdc++ 
 
 
In contests, using this file is a good idea, when you want to reduce the time wasted in doing chores; especially when your rank is time sensitive.
This also reduces all the chores of writing all the necessary header files.
You donâ€™t have to remember all the STL of GNU C++ for every function you use.
